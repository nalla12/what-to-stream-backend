// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhatToStreamBackend.Models;

#nullable disable

namespace WhatToStreamBackend.Migrations
{
    [DbContext(typeof(ShowsDbContext))]
    [Migration("20240608005238_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WhatToStreamBackend.Models.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CountryCode");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryCode = "dk",
                            Name = "Denmark"
                        },
                        new
                        {
                            CountryCode = "gb",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            CountryCode = "us",
                            Name = "United States"
                        },
                        new
                        {
                            CountryCode = "jp",
                            Name = "Japan"
                        },
                        new
                        {
                            CountryCode = "kr",
                            Name = "South Korea"
                        },
                        new
                        {
                            CountryCode = "se",
                            Name = "Sweden"
                        });
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = "action",
                            Name = "Action"
                        },
                        new
                        {
                            Id = "adventure",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = "animation",
                            Name = "Animation"
                        },
                        new
                        {
                            Id = "comedy",
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = "crime",
                            Name = "Crime"
                        },
                        new
                        {
                            Id = "documentary",
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = "drama",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = "family",
                            Name = "Family"
                        },
                        new
                        {
                            Id = "fantasy",
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = "history",
                            Name = "History"
                        },
                        new
                        {
                            Id = "horror",
                            Name = "Horror"
                        },
                        new
                        {
                            Id = "music",
                            Name = "Music"
                        },
                        new
                        {
                            Id = "mystery",
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = "news",
                            Name = "News"
                        },
                        new
                        {
                            Id = "reality",
                            Name = "Reality"
                        },
                        new
                        {
                            Id = "romance",
                            Name = "Romance"
                        },
                        new
                        {
                            Id = "scifi",
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = "talk",
                            Name = "Talk Show"
                        },
                        new
                        {
                            Id = "thriller",
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = "war",
                            Name = "War"
                        },
                        new
                        {
                            Id = "western",
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.HorizontalImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("W1080")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W1440")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W360")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W480")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W720")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("HorizontalImages");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ServiceImageSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DarkThemeImage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("LightThemeImage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("WhiteImage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("ServiceImageSets");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ServiceInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HomePage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ImageSetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ThemeColorCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ImageSetId");

                    b.ToTable("ServiceInfos");

                    b.HasData(
                        new
                        {
                            Id = "apple",
                            HomePage = "https://tv.apple.com",
                            Name = "Apple TV",
                            ThemeColorCode = "#000000"
                        },
                        new
                        {
                            Id = "netflix",
                            HomePage = "https://netflix.com",
                            Name = "Netflix",
                            ThemeColorCode = "#E50914"
                        },
                        new
                        {
                            Id = "prime",
                            HomePage = "https://www.primevideo.com/",
                            Name = "Prime Video",
                            ThemeColorCode = "#00A8E1"
                        },
                        new
                        {
                            Id = "disney",
                            HomePage = "https://www.disneyplus.com/",
                            Name = "Disney+",
                            ThemeColorCode = "#01137c"
                        });
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.Show", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("int");

                    b.Property<int?>("FirstAirYear")
                        .HasColumnType("int");

                    b.Property<int?>("ImageSetId")
                        .HasColumnType("int");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LastAirYear")
                        .HasColumnType("int");

                    b.Property<int?>("Maximum")
                        .HasColumnType("int");

                    b.Property<int?>("Minimum")
                        .HasColumnType("int");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Overview")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonCount")
                        .HasColumnType("int");

                    b.Property<string>("ShowType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TmdbId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ImageSetId");

                    b.ToTable("Shows");

                    b.HasData(
                        new
                        {
                            Id = "66",
                            ImdbId = "tt0111161",
                            ItemType = "show",
                            OriginalTitle = "The Shawshank Redemption",
                            Overview = "Red (Morgan Freeman) and Andy (Tim Robbins), both incarcerated at Shawshank prison, forge an unlikely bond that will span more than twenty years. Together they discover hope as the ultimate means of survival, in a poignant tale of the human spirit.",
                            Rating = 90,
                            ReleaseYear = 1994,
                            ShowType = "movie",
                            Title = "The Shawshank Redemption",
                            TmdbId = "movie/278"
                        });
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ShowGenre", b =>
                {
                    b.Property<string>("ShowId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(0);

                    b.Property<string>("GenreId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(1);

                    b.HasKey("ShowId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("ShowGenres");

                    b.HasData(
                        new
                        {
                            ShowId = "66",
                            GenreId = "drama"
                        });
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ShowImageSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HorizontalBackdropId")
                        .HasColumnType("int");

                    b.Property<int?>("HorizontalPosterId")
                        .HasColumnType("int");

                    b.Property<int?>("VerticalBackdropId")
                        .HasColumnType("int");

                    b.Property<int?>("VerticalPosterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HorizontalBackdropId");

                    b.HasIndex("HorizontalPosterId");

                    b.HasIndex("VerticalBackdropId");

                    b.HasIndex("VerticalPosterId");

                    b.ToTable("ShowImageSets");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.StreamingOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("ShowId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("ServiceId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(2);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnOrder(3);

                    b.Property<int?>("AvailableSince")
                        .HasColumnType("int");

                    b.Property<int?>("ExpiresOn")
                        .HasColumnType("int");

                    b.Property<bool?>("ExpiresSoon")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Quality")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VideoLink")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id", "ShowId", "ServiceId", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ShowId");

                    b.ToTable("StreamingOptions");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.VerticalImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("W240")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W360")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W480")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W600")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("W720")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("VerticalImages");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ServiceInfo", b =>
                {
                    b.HasOne("WhatToStreamBackend.Models.ServiceImageSet", "ImageSet")
                        .WithMany()
                        .HasForeignKey("ImageSetId");

                    b.Navigation("ImageSet");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.Show", b =>
                {
                    b.HasOne("WhatToStreamBackend.Models.ShowImageSet", "ImageSet")
                        .WithMany()
                        .HasForeignKey("ImageSetId");

                    b.Navigation("ImageSet");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ShowGenre", b =>
                {
                    b.HasOne("WhatToStreamBackend.Models.Genre", "Genre")
                        .WithMany("ShowGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhatToStreamBackend.Models.Show", "Show")
                        .WithMany("ShowGenres")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ShowImageSet", b =>
                {
                    b.HasOne("WhatToStreamBackend.Models.HorizontalImage", "HorizontalBackdrop")
                        .WithMany()
                        .HasForeignKey("HorizontalBackdropId");

                    b.HasOne("WhatToStreamBackend.Models.HorizontalImage", "HorizontalPoster")
                        .WithMany()
                        .HasForeignKey("HorizontalPosterId");

                    b.HasOne("WhatToStreamBackend.Models.VerticalImage", "VerticalBackdrop")
                        .WithMany()
                        .HasForeignKey("VerticalBackdropId");

                    b.HasOne("WhatToStreamBackend.Models.VerticalImage", "VerticalPoster")
                        .WithMany()
                        .HasForeignKey("VerticalPosterId");

                    b.Navigation("HorizontalBackdrop");

                    b.Navigation("HorizontalPoster");

                    b.Navigation("VerticalBackdrop");

                    b.Navigation("VerticalPoster");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.StreamingOption", b =>
                {
                    b.HasOne("WhatToStreamBackend.Models.Country", "Country")
                        .WithMany("StreamingOptions")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhatToStreamBackend.Models.ServiceInfo", "StreamingService")
                        .WithMany("StreamingOptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhatToStreamBackend.Models.Show", "Show")
                        .WithMany("StreamingOptions")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Show");

                    b.Navigation("StreamingService");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.Country", b =>
                {
                    b.Navigation("StreamingOptions");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.Genre", b =>
                {
                    b.Navigation("ShowGenres");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.ServiceInfo", b =>
                {
                    b.Navigation("StreamingOptions");
                });

            modelBuilder.Entity("WhatToStreamBackend.Models.Show", b =>
                {
                    b.Navigation("ShowGenres");

                    b.Navigation("StreamingOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
